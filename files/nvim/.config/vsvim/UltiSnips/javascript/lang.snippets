# Flow control

# if
snippet if "if (condition) { ... }" b
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# if ... else
snippet ife "if (condition) { ... } else { ... }" b
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet

# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# switch
snippet switch
switch (${1:expression}) {
	case ${3:case}:
		${4}
		break
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break" b
case ${1:case}:
	${0:${VISUAL}}
	break
endsnippet

snippet try "try { ... } catch(e) { ... }" b
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }" b
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

# throw Error
snippet terr
throw new Error('${1:error message}')
endsnippet

# return
snippet ret
return ${0:result}
endsnippet

snippet for "for (...) {...}"
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do { ... } while (condition)"
do {
	${0:${VISUAL}}
} while (${1:/* condition */})
endsnippet

# For in loop
snippet fori
for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet

# Documentation
# docstring
snippet /**
/**
 * ${0:description}
 */
endsnippet
snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet
snippet @ret
@return {${1:type}} ${0:description}
endsnippet

# JSON.parse
snippet jsonp
JSON.parse(${0:jstr})
endsnippet

# JSON.stringify
snippet jsons
JSON.stringify(${0:object})
endsnippet

# Debugging
snippet cl "console.log"
console.log(${0})
endsnippet
