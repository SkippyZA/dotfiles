#!/usr/bin/env bash
#
# bootstrap all the things!

DOTFILES_ROOT="`pwd`"

set -e

echo ''

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

install_oh_my_zsh() {
  if [ ! -d ~/.oh-my-zsh ]; then
    git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
    ln -s ~/.dotfiles/zsh/mytheme.zsh-theme ~/.oh-my-zsh/themes/mytheme.zsh-theme
    success 'Checked out oh-my-zsh'
  else
    success 'Folder for oh-my-zsh already exists'
  fi
}

install_vim_pathogen() {
  mkdir -p ~/.vim/autoload ~/.vim/bundle
  if [ ! -f ~/.vim/autoload/pathogen.vim ]; then
    wget -qO ~/.vim/autoload/pathogen.vim "https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim"
  fi
  success 'vim pathogen installed'
}

install_vim_theme () {
  if [ ! -d ~/.vim/colors ]; then
    mkdir -p ~/.vim/colors
  fi
  if [ ! -f ~/.vim/colors/mustang.vim ]; then
    wget -qO ~/.vim/colors/mustang.vim "http://goo.gl/lE2lTa"
  fi
  success 'vim theme installed'
}

install_vim_plugins () {
    while read plugin_git
    do
        IFS='|' read -ra details <<< "$plugin_git"

        name=${details[0]}
        repo=${details[1]}
        dest="$HOME/.vim/bundle/$name"

        if [ ! -d "$dest" ]; then
            git clone --quiet $repo $dest
        fi
        success "$name installed"

    done < $DOTFILES_ROOT/vim/plugins

    success 'vim plugins installed'
}

install_patched_mono_font () {
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
	    if [ ! -d ~/.fonts/ubuntu-mono-powerline ]; then
		git clone --quiet https://github.com/scotu/ubuntu-mono-powerline.git ~/.fonts/ubuntu-mono-powerline
		success "patched mono font installed for use in vim powerline"
	    fi
    else
        success "OSX does not yet support mono font for vim powerline"
    fi
}

ignore_ssh_authenticity () {
    if [ ! -f ~/.ssh/config ]; then
        touch ~/.ssh.config
    fi
    if ! grep -Fxq "Host github.com" ~/.ssh/config; then
        echo -e "\nHost github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    fi
    success 'StrictHostKeyChecking disabled for github.com'
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig installed'
    
    git config --global core.excludesfile '~/.gitignore'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find -L $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "Attempting to symlimk a file that already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

ignore_ssh_authenticity
setup_gitconfig
install_dotfiles
install_patched_mono_font
install_oh_my_zsh
setup_gitconfig
install_vim_pathogen
install_vim_plugins
install_vim_theme

echo ''
echo '  All installed!'
